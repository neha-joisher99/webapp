name: Continuous Deployment

on:
    workflow_run:
      workflows: ["ami-build"]
      types: 
        - completed
      branches:
        - main 
jobs:
    deploy:
      runs-on: ubuntu-latest
      if: github.event.workflow_run.conclusion == 'success'
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '16' 

        # - name: Install AWS CLI
        #   run: |
        #     curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        #     unzip awscliv2.zip
        #     sudo ./aws/install
        #     aws --version


        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
                aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }} 

        - name: Fetch Existing Launch Template ID
          id: fetch-template
          run: |
                # Modify the query to target the specific launch template you need
                LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
                echo "Launch Template ID: $LAUNCH_TEMPLATE_ID"
                echo "::set-output name=launchTemplateId::$LAUNCH_TEMPLATE_ID"
    
        - name: Update Launch Template
          run: |
                # Use the launch template ID from the previous step
                LAUNCH_TEMPLATE_ID=${{ steps.fetch-template.outputs.launchTemplateId }}
        
                # Fetch the latest AMI ID 
                AMI_ID=$(aws ec2 describe-images --owners ${{ secrets.ACCOUNT_ID }} --query 'Images[0].ImageId' --output text)
                echo "AMI ID: $AMI_ID"
                
                LAUNCH_TEMPLATE_ID=${{ steps.fetch-template.outputs.launchTemplateId }}
                LATEST_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-id $LAUNCH_TEMPLATE_ID --query 'LaunchTemplateVersions[-1:].VersionNumber' --output text)
                aws ec2 create-launch-template-version --launch-template-id $LAUNCH_TEMPLATE_ID --source-version $LATEST_VERSION --launch-template-data '{"ImageId":"'$AMI_ID'"}'

                echo "New Version: $VERSION"
                echo "LAUNCH_TEMPLATE_ID=$LAUNCH_TEMPLATE_ID" >> $GITHUB_ENV
                echo "VERSION=$VERSION" >> $GITHUB_ENV

        - name: Fetch Existing Auto Scaling Group Names
          id: fetch-asg-names
          run: |
                    # List Auto Scaling groups and store their names
                    ASG_NAMES=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*].AutoScalingGroupName' --output text)
                    echo "Auto Scaling Group Names: $ASG_NAMES"
                    echo "::set-output name=asgNames::$ASG_NAMES"
        
        - name: Update Auto Scaling Groups to New Launch Template Version
          run: |

                # Debug: Print the Launch Template ID and Version
                echo "Using Launch Template ID: $LAUNCH_TEMPLATE_ID"
                echo "Using Version: $VERSION" 
                echo "Using ASG: $ASG_NAME"    
            
                # Iterate over each Auto Scaling group name
                for ASG_NAME in ${{ steps.fetch-asg-names.outputs.asgNames }}
                do
                    echo "Updating Auto Scaling Group: $ASG_NAME"
                    aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME --launch-template "LaunchTemplateId=${{ env.LAUNCH_TEMPLATE_ID }},Version=${{ env.VERSION }}"
                done
        
        - name: Issue instance refresh
          run: |
            for ASG_NAME in ${{ steps.fetch-asg-names.outputs.asgNames }}
            do
                echo "Checking instance refresh status for: $ASG_NAME"
                
                # Check if an instance refresh is already in progress
                STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME --query 'InstanceRefreshes[0].Status' --output text)
        
                if [[ $STATUS == "InProgress" ]]; then
                    echo "An instance refresh is already in progress for $ASG_NAME. Waiting for it to complete..."
                    # Wait for the ongoing instance refresh to complete
                    while [[ $STATUS == "InProgress" ]]; do
                        sleep 30
                        STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME --query 'InstanceRefreshes[0].Status' --output text)
                        echo "Waiting... Current status: $STATUS"
                    done
                fi
        
                # Start a new instance refresh
                echo "Starting a new instance refresh for: $ASG_NAME"
                aws autoscaling start-instance-refresh --auto-scaling-group-name $ASG_NAME
        
                # Poll the status of the new instance refresh
                while true; do
                    STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME --query 'InstanceRefreshes[0].Status' --output text)
                    if [[ $STATUS == "InProgress" ]]; then
                        echo "Instance refresh for $ASG_NAME in progress..."
                        sleep 30
                    else
                        echo "Instance refresh for $ASG_NAME complete with status: $STATUS"
                        break
                    fi
                done
            done
